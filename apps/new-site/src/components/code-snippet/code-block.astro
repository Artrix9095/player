---
import clsx from 'clsx';
import type { HTMLAttributes } from 'astro/types';
import CodeHighlightLines from './code-highlight-lines.astro';
import HMRCodeHighlightLines from './hmr/code-highlight-lines.svelte';
import HMRLineNumbers from './hmr/code-line-numbers.svelte';

interface Props extends HTMLAttributes<'div'> {
  id: string;
  domId?: string | null;
  flat?: boolean;
  numbered?: boolean;
  lines: number;
  highlights?: string;
}

const {
  id,
  domId,
  lines,
  highlights,
  numbered,
  flat,
  class: _class,
  style,
  ...htmlProps
} = Astro.props;

const lineNumbers = [...Array(lines).keys()].map((n) => n + 1),
  lineNumberProps = {
    class: clsx(
      'flex absolute top-0 left-0 m-0 flex-col text-sm leading-[var(--leading)]',
      'flex-none select-none text-right text-soft/40',
      highlights ? 'pl-2' : 'pl-0',
    ),
    style: 'border-radius: 0; padding-top: 0;',
    'aria-hidden': 'true',
    'data-numbers': true,
  } as const;
---

<div
  {...htmlProps}
  id={domId}
  class={clsx(
    'code-block relative text-sm leading-[var(--leading)] flex min-h-0',
    'scrollbar scrollbar-square scroll-contain overflow-auto',
    !flat
      ? 'shadow-xl rounded-md border-border border 576:max-h-[32rem] max-h-[60vh] mx-auto '
      : 'w-full min-h-full',
    _class,
  )}
  style={clsx(`--leading: 1.375rem;`, style)}
  data-flat={!!flat}
  data-numbers={!!numbered}
  data-numbers-large={!!numbered && lines >= 100}
  data-hl={!!highlights}
>
  <slot name="top" />

  <slot />

  {
    numbered && import.meta.env.DEV ? (
      <HMRLineNumbers
        {id}
        {lines}
        {...lineNumberProps}
        class={lineNumberProps.class}
        client:visible
      />
    ) : (
      <pre {...lineNumberProps} set:html={lineNumbers.join('\n')} />
    )
  }

  {
    import.meta.env.DEV ? (
      <HMRCodeHighlightLines {id} {lines} {highlights} client:visible />
    ) : (
      <CodeHighlightLines {lines} {highlights} />
    )
  }
</div>

<style>
  .code-block[data-flat] {
    max-height: calc(var(--code-block-max-h, 0px) - var(--code-block-gutters, 0px));
  }

  .code-block :global(pre code[data-lang-bash] span) {
    color: #fafafa !important;
  }

  .code-block :global(pre code[data-lang-bash] .line:not(:empty)::before) {
    content: '> ';
    font-weight: bold;
    color: var(--terminal-line-pointer);
  }

  .code-block[data-numbers] :global(pre:not([data-numbers])) {
    tab-size: 2;
    -o-tab-size: 2;
    -moz-tab-size: 2;
    padding-left: 2.5em;
  }

  .code-block[data-numbers-large] :global(pre:not([data-numbers])) {
    padding-left: 3em;
  }
</style>
