---
import { Code } from 'astro:components';

import CodeBlockWrapper from '../../../components/code-snippet/code-block-wrapper.svelte';
import Heading from '../../../components/docs/heading.svelte';
import Table from '../../../components/table.astro';
import { findMDNLink, findReactComponents, getLinks } from './api-utils';
import NameCell from './name-table-cell.astro';
import Header from './react-api-header.astro';
import TypeCell from './type-table-cell.astro';

const { pathname } = Astro.url,
  components = findReactComponents(pathname);
---

{
  components.length ? (
    <>
      <Heading title="API Reference" level={2} />

      {components.map((component) => {
        const hasValues = component.props?.length || component.callbacks?.length;
        if (!hasValues) return null;

        let propsType = component.propsType ? `, type ${component.propsType}` : '',
          importCode = '',
          refType = component.ref?.type.concise,
          hasInstance = refType === component.instance?.name,
          fullComponentName = component.namespace
            ? `${component.namespace}.${component.name}`
            : component.name,
          instanceName =
            hasInstance && component.instance ? `${component.instance.name}Instance` : refType;

        if (component.namespace) {
          importCode = [
            `import { ${component.namespace} } from "@vidstack/react";`,
            '',
            `type Props = ${component.namespace}.${component.propsType};`,
            '',
            `const Component = ${component.namespace}.${component.name};`,
          ].join('\n');
        } else {
          importCode = `import { ${component.name}${propsType} } from "@vidstack/react";`;
        }

        const props = (component.props || [])
          .filter((prop) => !prop.internal)
          .map((prop) => [
            <NameCell name={prop.name} docs={prop.docs} mdnLink={findMDNLink(getLinks(prop))} />,
            <TypeCell
              concise={prop.type.concise.includes(' ') ? prop.type.primitive : prop.type.concise}
              full={prop.type.full}
            />,
            <code>{prop.default ?? 'undefined'}</code>,
          ]);

        const callbacks = (component.callbacks || [])
          .filter((cb) => !cb.internal)
          .map((cb) => [
            <NameCell name={cb.name} docs={cb.docs} mdnLink={findMDNLink(getLinks(cb))} />,
            <TypeCell concise="function" full={cb.type.full} />,
          ]);

        const instanceProps = ((hasInstance && component.instance?.members?.props) || [])
          .filter((prop) => !prop.internal && !component.props?.some((p) => p.name === prop.name))
          .map((prop) => [
            <NameCell
              name={prop.name}
              docs={prop.docs}
              badges={[prop.readonly && 'readonly']}
              mdnLink={findMDNLink(getLinks(prop))}
            />,
            <TypeCell
              concise={prop.type.concise.includes(' ') ? prop.type.primitive : prop.type.concise}
              full={prop.type.full}
            />,
          ]);

        const instanceMethods = ((hasInstance && component.instance?.members?.methods) || [])
          .filter((prop) => !prop.internal)
          .map((method) => [
            <NameCell
              name={method.name}
              docs={method.docs}
              mdnLink={findMDNLink(getLinks(method))}
            />,
            <TypeCell concise="method" full={method.signature.type} />,
          ]);

        const instanceUsageCode = hasInstance
          ? [
              `import { ${
                component.namespace ?? component.name
              }, type ${instanceName} } from "@vidstack/react"`,
              '',
              `const ref = useRef<${instanceName}>(null);`,
              '',
              'useEffect(() => { /** Use props/methods here. */ }, [])',
              '',
              `<${fullComponentName} ref={ref}>`,
            ].join('\n')
          : '';

        return (
          <div class="mt-6">
            <Header
              title={component.name}
              slug={fullComponentName}
              description={component.docs}
              {importCode}
              badges={[component.attributes, refType ? `Ref<${instanceName}>` : null]}
            />

            {props.length && <Table cols={['Prop', 'Type', 'Default']} rows={props} />}

            {callbacks.length ? (
              <div class="mt-8">
                <Heading title="Callbacks" slug={`${fullComponentName}.callbacks`} level={4} />
                <Table cols={['Callback', 'Type']} rows={callbacks} />
              </div>
            ) : null}

            {instanceProps.length || instanceMethods.length ? (
              <div>
                <Heading title="Instance" slug={`${fullComponentName}.instance`} level={4} />
                <CodeBlockWrapper class="mt-6 not-prose text-sm">
                  <Code code={instanceUsageCode} lang="tsx" theme="github-dark" />
                  <Code code={instanceUsageCode} lang="tsx" theme="github-light" />
                </CodeBlockWrapper>
                <Table
                  cols={['Instance Prop', 'Type']}
                  rows={[...instanceProps, ...instanceMethods]}
                />
              </div>
            ) : null}
          </div>
        );
      })}
    </>
  ) : null
}
